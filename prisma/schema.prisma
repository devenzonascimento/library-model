generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reader {
  id             String         @id @default(uuid())
  name           String
  address        String
  city           String
  state          String
  phone          String
  email          String         @unique
  identification String         @unique
  categoryId     String
  birthDate      DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  category       ReaderCategory @relation(fields: [categoryId], references: [code])
  loans          Loan[]
  reservations   Reservation[]
}

model ReaderCategory {
  code        String   @id @default(uuid())
  description String
  maxLoanDays Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  readers     Reader[]
}

model Book {
  id              String       @id @default(uuid())
  code            String       @unique
  isbn            String       @unique
  title           String
  categoryId      String
  authors         String
  keywords        String[]
  publicationDate DateTime
  editionNumber   Int
  publisher       String
  pageCount       Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  category        BookCategory @relation(fields: [categoryId], references: [code])
  copies          BookCopy[]
}

model BookCategory {
  code        String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  books       Book[]
}

model BookCopy {
  id           String        @id @default(uuid())
  bookId       String
  status       Status        @default(AVAILABLE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  book         Book          @relation(fields: [bookId], references: [id])
  loans        Loan[]
  reservations Reservation[]
}

model Staff {
  id           String        @id @default(uuid())
  name         String
  address      String
  city         String
  state        String
  phone        String
  birthDate    DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  loans        Loan[]
  reservations Reservation[]
}

model Reservation {
  id                 String   @id @default(uuid())
  reservationDate    DateTime
  expectedPickupDate DateTime
  expectedReturnDate DateTime
  readerId           String
  bookCopyId         String
  staffId            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  reader             Reader   @relation(fields: [readerId], references: [id])
  bookCopy           BookCopy @relation(fields: [bookCopyId], references: [id])
  staff              Staff    @relation(fields: [staffId], references: [id])
}

model Loan {
  id                 String    @id @default(uuid())
  loanDate           DateTime
  expectedReturnDate DateTime
  actualReturnDate   DateTime?
  readerId           String
  bookCopyId         String
  staffId            String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  reader             Reader    @relation(fields: [readerId], references: [id])
  bookCopy           BookCopy  @relation(fields: [bookCopyId], references: [id])
  staff              Staff     @relation(fields: [staffId], references: [id])
}

enum Status {
  AVAILABLE
  ON_LOAN
  RESERVED
  LOST
}
